{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-29T17:43:09.147Z",
    "end": "2024-01-29T17:43:12.457Z",
    "duration": 3310,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "94de9cf6-8ef8-45af-9d3d-02792882ea33",
      "title": "",
      "fullFile": "cypress/e2e/errors.cy.js",
      "file": "cypress/e2e/errors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
          "title": "Test Script Runner API Calls for Error Codes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test Error Code 423 for Creating Order",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 423 for Creating Order",
              "timedOut": null,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/orders`, (0, _constants.createOrder423Body)(), false).then(res => {\n  cy.statusAndTime(res.status, res.duration, 423, 500);\n  expect(typeof res).to.eq('object');\n  expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.createOrder423);\n});",
              "err": {},
              "uuid": "6707cdd8-3373-4aea-9326-22d79fd242f7",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 405 for Getting Order",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 405 for Getting Order",
              "timedOut": null,
              "duration": 665,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/orders`, (0, _constants.createOrderBody)(deliveryId), true).then(res => {\n    orderId = res.body.data.orderId;\n    cy.apiRequest(_constants.methods.patch, `${Cypress.env('baseUrl')}/orders/${orderId}`, (0, _constants.createOrder423Body)(), false).then(res => {\n      cy.statusAndTime(res.status, res.duration, 405, 500);\n      expect(typeof res).to.eq('object');\n      expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.getOrder405);\n    });\n  });\n});",
              "err": {},
              "uuid": "24f5039d-fdca-4421-9ebe-2c5a69249a39",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 404 for Getting Delivery",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 404 for Getting Delivery",
              "timedOut": null,
              "duration": 263,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  cy.apiRequest(_constants.methods.get, `${Cypress.env('baseUrl')}/deliveries/${deliveryId * 10}`, null, false).then(res => {\n    cy.statusAndTime(res.status, res.duration, 404, 500);\n    expect(typeof res).to.eq('object');\n    expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.getDelivery404);\n  });\n});",
              "err": {},
              "uuid": "c6d4d268-96d8-4640-ae6a-0e8d031ff7ce",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 401 for Getting Delivery",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 401 for Getting Delivery",
              "timedOut": null,
              "duration": 261,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  cy.request({\n    method: 'GET',\n    url: `${Cypress.env('baseUrl')}/deliveries/${deliveryId}`,\n    failOnStatusCode: false\n  }).then(res => {\n    cy.statusAndTime(res.status, res.duration, 401, 500);\n    expect(typeof res).to.eq('object');\n    expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.getDelivery401);\n  });\n});",
              "err": {},
              "uuid": "d3e729f8-49a6-4922-83bc-36086d6a19e0",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 400 for Updating Delivery",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 400 for Updating Delivery",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  deliveryStatus = 'PICKUP_READY_FAKE';\n  cy.apiRequest(_constants.methods.put, `${Cypress.env('baseUrl')}/deliveries/${deliveryId}`, (0, _constants.updateDeliveryBody)(deliveryStatus), false).then(res => {\n    cy.statusAndTime(res.status, res.duration, 400, 2000);\n    expect(typeof res).to.eq('object');\n    expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.updateDelivery400);\n  });\n});",
              "err": {},
              "uuid": "29143ebb-0237-4cc1-bf15-3d6af8f79911",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 404 for Deleting Order",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 404 for Deleting Order",
              "timedOut": null,
              "duration": 676,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/orders`, (0, _constants.createOrderBody)(deliveryId), true).then(res => {\n    orderId = res.body.data.orderId;\n    cy.apiRequest(_constants.methods.delete, `${Cypress.env('baseUrl')}/orders/${orderId}`, null, true).then(res => {\n      cy.apiRequest(_constants.methods.delete, `${Cypress.env('baseUrl')}/orders/${orderId}`, null, false).then(res => {\n        cy.statusAndTime(res.status, res.duration, 404, 500);\n        expect(typeof res).to.eq('object');\n        expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.deleteOrder404);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8f227c04-accd-4b8c-a1f0-1e63f8fe8d3b",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Error Code 404 for Deleting Delivery",
              "fullTitle": "Test Script Runner API Calls for Error Codes Test Error Code 404 for Deleting Delivery",
              "timedOut": null,
              "duration": 964,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/deliveries`, (0, _constants.createDeliveryBody)(deliveryDate), true).then(res => {\n  deliveryId = res.body.data.deliveryId;\n  cy.apiRequest(_constants.methods.post, `${Cypress.env('baseUrl')}/orders`, (0, _constants.createOrderBody)(deliveryId), true).then(res => {\n    orderId = res.body.data.orderId;\n    cy.apiRequest(_constants.methods.delete, `${Cypress.env('baseUrl')}/deliveries/${deliveryId}`, null, true).then(res => {\n      cy.apiRequest(_constants.methods.delete, `${Cypress.env('baseUrl')}/deliveries/${deliveryId}`, null, false).then(res => {\n        cy.statusAndTime(res.status, res.duration, 404, 500);\n        expect(typeof res).to.eq('object');\n        expect(res.body).to.be.jsonSchema(_constants.expectedErrorSchemas.deleteDelivery404);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "606cdef4-8ba9-4b17-a8f3-56cc31c38560",
              "parentUUID": "067efb71-b0d1-49c1-b265-a25b2e7b13f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6707cdd8-3373-4aea-9326-22d79fd242f7",
            "24f5039d-fdca-4421-9ebe-2c5a69249a39",
            "c6d4d268-96d8-4640-ae6a-0e8d031ff7ce",
            "d3e729f8-49a6-4922-83bc-36086d6a19e0",
            "29143ebb-0237-4cc1-bf15-3d6af8f79911",
            "8f227c04-accd-4b8c-a1f0-1e63f8fe8d3b",
            "606cdef4-8ba9-4b17-a8f3-56cc31c38560"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3181,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}